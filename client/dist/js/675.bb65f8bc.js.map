{"version":3,"file":"js/675.bb65f8bc.js","mappings":"o5BAQA,MAAMA,GAAQC,EAAAA,EAAAA,MACRC,GAASC,EAAAA,EAAAA,MACTC,GAASC,EAAAA,EAAAA,GAAeC,oCACxBC,GAAgBC,EAAAA,EAAAA,KAAS,IAAMR,EAAMS,MAAMF,gBAC3CG,GAAoBC,EAAAA,EAAAA,KAAI,GACxBC,GAAkBD,EAAAA,EAAAA,IAAI,IACtBE,GAASF,EAAAA,EAAAA,M,OAEfG,EAAAA,EAAAA,KAAUC,UACNL,EAAkBM,OAAQ,EACI,OAA1BhB,EAAMS,MAAMQ,iBACNC,EAAAA,EAAAA,IAAU,oBAAoBC,MAAKC,GAAYR,EAAgBI,MAAQI,EAASC,KAAKC,iBAEzFlB,EAAOmB,OAAOC,SAASxB,EAAMS,MAAMgB,WAAWN,MAAKJ,UAErD,GADAL,EAAkBM,OAAQ,EACa,cAAnCI,EAASC,KAAKK,WAAWC,OACzB3B,EAAM4B,OAAO,gBAAiB,YAC3B,CAGH,IAAIC,EACAC,EAHJ9B,EAAM4B,OAAO,gBAAiB,UAC9B5B,EAAM4B,OAAO,aAAa,GAG1B,UACUV,EAAAA,EAAAA,KAAW,gCAAiC,CAAEa,GAAI/B,EAAMS,MAAMQ,UAAWe,SAAS,IAASb,MAAKC,GAAYS,EAAmBT,EAASC,OAC9IS,QAA2B9B,EAAMS,MAAMwB,cAAcC,SAASC,MAAKC,GAAKA,EAAEC,UAAYrC,EAAMS,MAAMQ,UAAUqB,YAClGR,IAAuBD,SACvBX,EAAAA,EAAAA,KAAW,qBAAsB,CACnCqB,SAAUvC,EAAMS,MAAMwB,cAAcK,IACpCrB,UAAWjB,EAAMS,MAAM+B,eAAeF,IACtCG,gBAAiBzC,EAAMS,MAAM+B,eAAeE,UAAY,IAAM1C,EAAMS,MAAM+B,eAAeG,iBAG3FzB,EAAAA,EAAAA,UAAc,wBAAuBlB,EAAMS,MAAM+B,eAAeF,MAG1E,CAFE,MAAOM,GACL/B,EAAOG,MAAQ4B,CACnB,CACA5C,EAAM4B,OAAO,iBAAkB,GACnC,KAEJiB,YAAW9B,UACoB,QAAvBR,EAAcS,OACdhB,EAAM4B,OAAO,aAAa,SACpB1B,EAAO4C,KAAK,mBAEZ5C,EAAO4C,KAAM,SAAQlC,EAAgBI,qBAC/C,GACD,IAAK,KAGZ+B,EAAAA,EAAAA,KAAY,KACmB,QAAvBxC,EAAcS,OACdhB,EAAM4B,OAAO,gBAAiB,UAClC,I,sOCzDJ,MAAMoB,EAAc,EAEpB,O","sources":["webpack://client/./src/views/Public/PaymentStatus.vue","webpack://client/./src/views/Public/PaymentStatus.vue?aff3"],"sourcesContent":["<script setup>\r\nimport { ref, onMounted, computed, onUnmounted } from 'vue'\r\nimport { useStore } from 'vuex';\r\nimport PaymongoClient from 'paymongo.js';\r\nimport axios from 'axios';\r\nimport { useRouter } from 'vue-router';\r\nimport CatchError from '../../components/CatchError.vue';\r\n\r\nconst store = useStore()\r\nconst router = useRouter()\r\nconst client = PaymongoClient(process.env.VUE_APP_PayMongoSK)\r\nconst paymentStatus = computed(() => store.state.paymentStatus)\r\nconst paymentProcessing = ref(false)\r\nconst patientUsername = ref('')\r\nconst errMsg = ref()\r\n\r\nonMounted(async () => {\r\n    paymentProcessing.value = true\r\n    if (store.state.patientID !== null) {\r\n        await axios.get(\"/session/patient\").then(response => patientUsername.value = response.data.username);\r\n    }\r\n    await client.source.retrieve(store.state.paymentID).then(async response => {\r\n        paymentProcessing.value = false\r\n        if (response.data.attributes.status == 'chargeable') {\r\n            store.commit(\"paymentStatus\", 'paid')\r\n        } else {\r\n            store.commit(\"paymentStatus\", 'failed')\r\n            store.commit(\"appointed\", false)\r\n            let pastAppointments\r\n            let checkPatientRecord\r\n            try {\r\n                await axios.post('/api/appointmentList/patients', { id: store.state.patientID, ongoing: false }).then(response => pastAppointments = response.data);\r\n                checkPatientRecord = await store.state.doctorDetails.patients.find(x => x.patient === store.state.patientID._id)\r\n                if (await checkPatientRecord && !pastAppointments) {\r\n                    await axios.post('/api/patientDelete', {\r\n                        doctorID: store.state.doctorDetails._id,\r\n                        patientID: store.state.patientDetails._id,\r\n                        patientFullName: store.state.patientDetails.firstName + \" \" + store.state.patientDetails.lastName\r\n                    });\r\n                }\r\n                await axios.delete(`/api/appointmentList/${store.state.patientDetails._id}`)\r\n            } catch (err) {\r\n                errMsg.value = err\r\n            }\r\n            store.commit(\"patientDetails\", [])\r\n        }\r\n    });\r\n    setTimeout(async () => {\r\n        if (paymentStatus.value == 'paid') {\r\n            store.commit(\"appointed\", true)\r\n            await router.push(\"/success\");\r\n        } else {\r\n            await router.push(`/user/${patientUsername.value}/registration`)\r\n        }\r\n    }, 5000);\r\n});\r\n\r\nonUnmounted(() => {\r\n    if (paymentStatus.value == 'paid') {\r\n        store.commit(\"paymentStatus\", 'pending')\r\n    }\r\n})\r\n</script>\r\n<template>\r\n    <section class=\"section is-medium\" v-if=\"!paymentProcessing\">\r\n        <CatchError :err-msg=\"errMsg\" />\r\n        <div class=\"container\" v-if=\"paymentStatus == 'paid'\">\r\n            <div class=\"box\">\r\n                <h3 class=\"title is-3 has-text-success\">You have successfuly paid your appointment. Redirecting browser\r\n                    in 5 seconds.</h3>\r\n            </div>\r\n        </div>\r\n        <div class=\"container\" v-else>\r\n            <div class=\"box\">\r\n                <h3 class=\"title is-3 has-text-danger\">Your payment transaction has failed. Please try again,\r\n                    redirecting browser in 5 seconds.</h3>\r\n            </div>\r\n        </div>\r\n    </section>\r\n    <section class=\"section is-medium\" v-else>\r\n        <div class=\"container\">\r\n            <div class=\"box\">\r\n                <h3 class=\"title is-3\">Your payment is processing, please wait...</h3>\r\n            </div>\r\n        </div>\r\n    </section>\r\n</template>","import script from \"./PaymentStatus.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PaymentStatus.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["store","useStore","router","useRouter","client","PaymongoClient","process","paymentStatus","computed","state","paymentProcessing","ref","patientUsername","errMsg","onMounted","async","value","patientID","axios","then","response","data","username","source","retrieve","paymentID","attributes","status","commit","pastAppointments","checkPatientRecord","id","ongoing","doctorDetails","patients","find","x","patient","_id","doctorID","patientDetails","patientFullName","firstName","lastName","err","setTimeout","push","onUnmounted","__exports__"],"sourceRoot":""}