{"version":3,"file":"js/905.18f795b8.js","mappings":"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","sources":["webpack://client/./src/components/ForgotPassword.vue","webpack://client/./src/components/ForgotPassword.vue?4972","webpack://client/./src/views/Public/DynamicLogin.vue","webpack://client/./src/views/Public/DynamicLogin.vue?812b"],"sourcesContent":["<script setup>\r\nimport { ref, computed } from 'vue'\r\nimport axios from 'axios';\r\n\r\nconst isLoading = ref(false)\r\nconst errMsg = ref('')\r\nconst modal = ref(false)\r\nconst emailExists = ref(false)\r\nconst code = ref('')\r\nconst codeSent = ref(false)\r\nconst codeVerified = ref(false)\r\nconst codeIncorrect = ref(false)\r\nconst newPassword = ref('')\r\nconst confirmPassword = ref('')\r\nconst passwordNotMatch = ref(false)\r\nconst passwordChanged = ref(false)\r\nconst noUserFound = ref(false)\r\nconst checkOTP = ref(false)\r\nconst userData = ref('')\r\nconst usernameHandler = ref(props.username)\r\nconst emailHandler = ref(props.email)\r\nconst userType = ref('')\r\nconst props = defineProps({\r\n    username: String,\r\n    email: String,\r\n    forgotPasswordPromptCount: {\r\n        type: Number,\r\n        default: 0\r\n    }\r\n});\r\nconst forgotPasswordPromptCountLimit = ref(2)\r\nconst forgotPasswordPromptCount = computed(() => props.forgotPasswordPromptCount)\r\n\r\nasync function getPatient() {\r\n    await axios.post('/api/user/verify_username', {\r\n        username: usernameHandler.value,\r\n        email: emailHandler.value,\r\n        forgotPassword: true\r\n    }).then(response => userData.value = response.data)\r\n    if (userData.value) {\r\n        noUserFound.value = false\r\n        try {\r\n            await axios.post('/api/OTPMail', {\r\n                email: emailHandler.value\r\n            }).then(codeSent.value = true)\r\n            codeSent.value = true\r\n            userType.value = 'patient'\r\n            checkOTP.value = false\r\n        } catch (err) {\r\n            errMsg.value = err\r\n        }\r\n    } else {\r\n        noUserFound.value = true\r\n    }\r\n}\r\nasync function getDoctor() {\r\n    await axios.post('/api/doctor/verify_username', {\r\n        username: usernameHandler.value,\r\n        email: emailHandler.value,\r\n        forgotPassword: true\r\n    }).then(response => userData.value = response.data)\r\n    if (userData.value) {\r\n        noUserFound.value = false\r\n        try {\r\n            await axios.post('/api/OTPMail', {\r\n                email: emailHandler.value\r\n            }).then(codeSent.value = true)\r\n            codeSent.value = true\r\n            userType.value = 'doctor'\r\n            checkOTP.value = false\r\n        } catch (err) {\r\n            errMsg.value = err\r\n        }\r\n    } else {\r\n        noUserFound.value = true\r\n    }\r\n}\r\nasync function getProvider() {\r\n    await axios.post('/api/manager/verify_username', {\r\n        username: usernameHandler.value,\r\n        email: emailHandler.value,\r\n        forgotPassword: true\r\n    }).then(response => userData.value = response.data)\r\n    if (userData.value) {\r\n        noUserFound.value = false\r\n        try {\r\n            await axios.post('/api/OTPMail', {\r\n                email: emailHandler.value\r\n            }).then(codeSent.value = true)\r\n            codeSent.value = true\r\n            userType.value = 'provider'\r\n            checkOTP.value = false\r\n        } catch (err) {\r\n            errMsg.value = err\r\n        }\r\n    } else {\r\n        noUserFound.value = true\r\n    }\r\n}\r\nasync function forgotPasswordOTP() {\r\n    if (usernameHandler.value != null || emailHandler.value != null) {\r\n        isLoading.value = true\r\n        let confirmEmail\r\n        await axios.post('/api/code/email', {\r\n            email: emailHandler.value\r\n        }).then(response => confirmEmail = response.data)\r\n        if (confirmEmail) {\r\n            emailExists.value = true\r\n        } else {\r\n            emailExists.value = false\r\n            checkOTP.value = true\r\n            while (checkOTP.value) {\r\n                await getPatient()\r\n                if (userData.value) break;\r\n                await getDoctor()\r\n                if (userData.value) break;\r\n                await getProvider()\r\n                if (userData.value) break;\r\n                checkOTP.value = false\r\n            }\r\n        }\r\n        isLoading.value = false\r\n    }\r\n}\r\nasync function verifyCode() {\r\n    let confirmCode\r\n    codeIncorrect.value = false\r\n    codeVerified.value = false\r\n    await axios.post('/api/code/verify', {\r\n        code: code.value\r\n    }).then(response => confirmCode = response.data)\r\n    if (confirmCode) {\r\n        codeVerified.value = true\r\n    } else {\r\n        codeIncorrect.value = true\r\n    }\r\n}\r\nasync function pushNewPassword() {\r\n    if (newPassword.value === confirmPassword.value) {\r\n        if (userType.value == 'patient') {\r\n            try {\r\n                await axios.put('/api/fupdatePassword/patient', {\r\n                    patientID: userData.value,\r\n                    password: newPassword.value\r\n                });\r\n                userData.value = ''\r\n                passwordChanged.value = true\r\n            } catch (err) {\r\n                passwordChanged.value = false\r\n                errMsg.value = err\r\n                userData.value = ''\r\n            }\r\n        } else if (userType.value == 'doctor') {\r\n            try {\r\n                await axios.put('/api/fupdatePassword/doctor', {\r\n                    doctorID: userData.value,\r\n                    password: newPassword.value\r\n                });\r\n                userData.value = ''\r\n                passwordChanged.value = true\r\n            } catch (err) {\r\n                passwordChanged.value = false\r\n                errMsg.value = err\r\n                userData.value = ''\r\n            }\r\n        } else if (userType.value == 'provider') {\r\n            try {\r\n                await axios.put('/api/fupdatePassword/manager', {\r\n                    managerID: userData.value,\r\n                    password: newPassword.value\r\n                });\r\n                userData.value = ''\r\n                passwordChanged.value = true\r\n            } catch (err) {\r\n                passwordChanged.value = false\r\n                errMsg.value = err\r\n                userData.value = ''\r\n            }\r\n        }\r\n    } else {\r\n        passwordNotMatch.value = true\r\n    }\r\n}\r\n</script>\r\n<template>\r\n    <a class=\"help has-text-danger\" @click=\"modal = !modal\"\r\n        v-if=\"forgotPasswordPromptCount >= forgotPasswordPromptCountLimit\">Forgot Password</a>\r\n    <div class=\"modal\" :class=\"{ 'is-active': modal }\">\r\n        <div class=\"modal-background\"></div>\r\n        <div class=\"modal-content has-text-left\" style=\"width: 40%; margin: auto\">\r\n            <section class=\"section box\" v-if=\"!codeSent\">\r\n                <p class=\"title is-4 has-text-danger\">Forgot Password</p>\r\n                <div class=\"notification is-danger\" v-if=\"errMsg\">{{ errMsg }}</div>\r\n                <div class=\"notification is-warning\" v-if=\"noUserFound\">No account has been found linked with this\r\n                    email.</div>\r\n                <div class=\"container\" v-if=\"!emailExists\">\r\n                    <div class=\"field\">\r\n                        <div class=\"control\">\r\n                            <label class=\"label\">Enter Username</label>\r\n                            <input class=\"input\" type=\"email\" v-model=\"usernameHandler\" />\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"field\">\r\n                        <div class=\"control\">\r\n                            <label class=\"label\">Enter Email</label>\r\n                            <input class=\"input\" type=\"email\" v-model=\"emailHandler\" />\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"field\">\r\n                        <div class=\"control\">\r\n                            <button class=\"button\" :class=\"{ 'is-loading': isLoading }\" @click=\"forgotPasswordOTP\"\r\n                                :disabled=\"emailHandler == null || usernameHandler == null\">Send OTP</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"notification is-danger\" v-else>You have to wait 10 minutes before requesting a code again.\r\n                </div>\r\n            </section>\r\n            <section class=\"section box\" v-else>\r\n                <div class=\"container\" v-if=\"!codeVerified\">\r\n                    <div class=\"notification is-warning\" v-if=\"codeIncorrect\">Incorrect code, please try again.</div>\r\n                    <div class=\"field\">\r\n                        <div class=\"control\">\r\n                            <label class=\"label\">Enter code</label>\r\n                            <input class=\"input\" type=\"number\" v-model=\"code\" />\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"field\">\r\n                        <div class=\"control\">\r\n                            <button class=\"button\" @click=\"verifyCode\">Verify</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"container\" v-else>\r\n                    <div class=\"notification is-danger\" v-if=\"passwordNotMatch\">Passwords not match.</div>\r\n                    <div class=\"container\" v-if=\"!passwordChanged\">\r\n                        <div class=\"field\">\r\n                            <div class=\"control\">\r\n                                <label class=\"label\">New Password:</label>\r\n                                <input class=\"input\" type=\"password\" v-model=\"newPassword\" />\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"field\">\r\n                            <div class=\"control\">\r\n                                <label class=\"label\">Confirm Password:</label>\r\n                                <input class=\"input\" type=\"password\" v-model=\"confirmPassword\" />\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"field\">\r\n                            <div class=\"control\">\r\n                                <button class=\"button\" @click=\"pushNewPassword\"\r\n                                    :disabled=\"newPassword == '' && confirmPassword == ''\">Confirm</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"container\" v-else>\r\n                        <div class=\"notification is-success\">Your password has been successfully changed.</div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n        <button class=\"modal-close is-large\" aria-label=\"close\" @click=\"modal = false\"></button>\r\n    </div>\r\n</template>\r\n<style scoped>\r\n@media (max-width: 991.98px) {\r\n    .modal-content {\r\n        width: 100% !important;\r\n    }\r\n}\r\n</style>","import script from \"./ForgotPassword.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ForgotPassword.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ForgotPassword.vue?vue&type=style&index=0&id=572fa0ea&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\ronan\\\\Documents\\\\Projects\\\\Appointment-Scheduler-Webapp\\\\client\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-572fa0ea\"]])\n\nexport default __exports__","<script setup>\r\nimport { ref, onMounted, onBeforeMount } from 'vue'\r\nimport axios from 'axios'\r\nimport ForgotPassword from '../../components/ForgotPassword.vue'\r\nimport { useStore } from 'vuex';\r\nimport { useRouter } from 'vue-router';\r\n\r\nconst store = useStore()\r\nconst router = useRouter()\r\n\r\nconst authProgress = ref(false)\r\n\r\nconst username = ref(null)\r\nconst password = ref(null)\r\nconst dynamicUser = ref(null)\r\nconst validateMessage = ref(null)\r\nconst incorrectUserPass = ref(Boolean)\r\nconst newAccount = ref(false)\r\nconst forgotPasswordCount = ref(0)\r\nconst fetchingAuth = ref(false)\r\n\r\nonMounted(async () => {\r\n    if (store.state.accountCreated == true) {\r\n        newAccount.value = true\r\n        store.commit('accountCreated', false)\r\n    }\r\n})\r\nonBeforeMount(async () => {\r\n    await axios.get(\"/session/patient\").then(async response => {\r\n        if (typeof response.data.username !== 'undefined') {\r\n            store.commit(\"patientUsername\", response.data.username)\r\n            store.commit(\"patientID\", response.data._id)\r\n            await router.push(`/user/${store.state.patientUsername}`);\r\n        }\r\n    })\r\n    await axios.get(\"/session/doctor\").then(async response => {\r\n        if (typeof response.data.alias !== 'undefined') {\r\n            store.commit(\"alias\", response.data.alias);\r\n            store.commit(\"doctorID\", response.data._id);\r\n            store.commit(\"doctorName\", response.data.fullname);\r\n            await router.push(`/doctor/${store.state.alias}/appointments`);\r\n        }\r\n    })\r\n    await axios.get(\"/session/manager\").then(async response => {\r\n        if (typeof response.data.hospital !== 'undefined') {\r\n            store.commit(\"managerHospital\", response.data.hospital);\r\n            await router.push(`/manager/${store.state.managerHospital}`);\r\n        }\r\n    })\r\n})\r\n\r\nasync function authPatient() {\r\n    await axios\r\n        .post(\"/api/auth/patient\", {\r\n            username: username.value,\r\n            password: password.value\r\n        })\r\n        .then(\r\n            async (response) => {\r\n                dynamicUser.value = await response.data\r\n                // if username and password matched to a patient\r\n                if (await dynamicUser.value) {\r\n                    authProgress.value = false\r\n                    await axios.post(\"/session/patient\", {\r\n                        _id: dynamicUser.value._id,\r\n                        name: dynamicUser.value.name,\r\n                        email: dynamicUser.value.gmail,\r\n                        username: username.value,\r\n                        province: dynamicUser.value.province,\r\n                        city: dynamicUser.value.city,\r\n                        currentAddress: dynamicUser.value.currentAddress\r\n                    });\r\n                    store.commit(\"patientUsername\", dynamicUser.value.username)\r\n                    store.commit(\"patientID\", dynamicUser.value._id)\r\n                    await router.push(`/user/${dynamicUser.value.username}`);\r\n                }\r\n            })\r\n}\r\nasync function authDoctor() {\r\n    await axios\r\n        .post(\"/api/auth/doctor\", {\r\n            username: username.value,\r\n            password: password.value\r\n        })\r\n        .then(\r\n            async (response) => {\r\n                dynamicUser.value = await response.data\r\n                // if username and password matched to a doctor\r\n                if (await dynamicUser.value) {\r\n                    authProgress.value = false\r\n                    await axios.post(\"/session/doctor\", {\r\n                        verified: dynamicUser.value.verified,\r\n                        _id: dynamicUser.value._id,\r\n                        licenseNo: dynamicUser.value.licenseNo,\r\n                        alias: dynamicUser.value.alias,\r\n                        fullname: dynamicUser.value.name,\r\n                        specialist: dynamicUser.value.specialist,\r\n                        gmail: dynamicUser.value.gmail,\r\n                        hospitalOrigin: dynamicUser.value.hospitalOrigin,\r\n                        schedule: dynamicUser.value.schedule,\r\n                        username: dynamicUser.value.username,\r\n                        messageHistory: dynamicUser.value.messageHistory,\r\n                        appointmentCategories: dynamicUser.value.appointmentCategories,\r\n                        paymentMethods: dynamicUser.value.paymentMethods\r\n                    });\r\n                    store.commit(\"alias\", dynamicUser.value.alias);\r\n                    store.commit(\"doctorID\", dynamicUser.value._id);\r\n                    store.commit(\"doctorName\", dynamicUser.value.name);\r\n                    await router.push(`/doctor/${dynamicUser.value.alias}/appointments`);\r\n                }\r\n            })\r\n}\r\nasync function providerLogin() {\r\n    await axios\r\n        .post(\"/api/auth/manager\", {\r\n            username: username.value,\r\n            password: password.value\r\n        })\r\n        .then(async (response) => {\r\n            dynamicUser.value = await response.data\r\n            if (await dynamicUser.value) {\r\n                await axios.post(\"/session/manager\", {\r\n                    _id: dynamicUser.value._id,\r\n                    registrationCode: dynamicUser.value.registrationCode,\r\n                    hospital: dynamicUser.value.hospital\r\n                });\r\n                store.commit(\"managerHospital\", dynamicUser.value.hospital);\r\n                await router.push(`/manager/${dynamicUser.value.hospital}`);\r\n            }\r\n        });\r\n}\r\nasync function login() {\r\n    fetchingAuth.value = true\r\n    if (username.value == null || password.value == null) {\r\n        incorrectUserPass.value = false;\r\n        validateMessage.value = \"empty username or password\";\r\n        username.value = null\r\n        password.value = null\r\n    } else {\r\n        authProgress.value = true\r\n        while (authProgress.value) {\r\n            await authPatient()\r\n            await authDoctor()\r\n            await providerLogin()\r\n            authProgress.value = false\r\n            forgotPasswordCount.value = forgotPasswordCount.value + 1\r\n            validateMessage.value = \"Incorrect username or password\";\r\n            incorrectUserPass.value = true;\r\n            username.value = null;\r\n            password.value = null;\r\n        }\r\n        fetchingAuth.value = false\r\n    }\r\n}\r\n</script>\r\n<template>\r\n    <section class=\"hero is-fullheight\">\r\n        <div class=\"hero-body\">\r\n            <div class=\"container\">\r\n                <div class=\"container has-text-centered animate__animated animate__fadeInLeft\">\r\n                    <div class=\"box\" style=\"width: 35%; margin: auto\">\r\n                        <div class=\"notification is-success\" v-if=\"newAccount\">Your account has been successfully\r\n                            created.</div>\r\n                        <br />\r\n                        <h1 class=\"title has-text-info has-text-centered\">MEDIC SEARCH</h1>\r\n                        <div class=\"field\">\r\n                            <div class=\"control\">\r\n                                <input class=\"input is-rounded\" type=\"text\" v-model=\"username\" placeholder=\"username\"\r\n                                    @keyup.enter=\"login\" required />\r\n                            </div>\r\n                            <div class=\"control\" style=\"margin-top: 2%\">\r\n                                <input class=\"input is-rounded\" type=\"password\" v-model=\"password\"\r\n                                    placeholder=\"password\" @keyup.enter=\"login\" required />\r\n                            </div>\r\n                            <h1 v-if=\"incorrectUserPass\" class=\"subtitle has-text-danger\">{{ validateMessage }}</h1>\r\n                            <h1 v-else-if=\"incorrectUserPass == false\" class=\"subtitle has-text-danger\">{{\r\n                                validateMessage\r\n                            }}</h1>\r\n                            <button type=\"button\" class=\"button is-info is-rounded\" @click=\"login\"\r\n                                :class=\"{ 'is-loading': fetchingAuth }\">Login</button>\r\n                            <br />\r\n                            <br />\r\n                            <a href=\"/user/signup\">Create an account</a>\r\n                        </div>\r\n                        <ForgotPassword :forgotPasswordPromptCount=\"forgotPasswordCount\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n</template>\r\n<style scoped>\r\n.hero {\r\n    background: no-repeat center url('../../assets/images/background-login.png');\r\n    background-size: cover;\r\n}\r\n\r\n@media (max-width: 991.98px) {\r\n    .box {\r\n        width: 100% !important;\r\n    }\r\n}\r\n</style>","import script from \"./DynamicLogin.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./DynamicLogin.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./DynamicLogin.vue?vue&type=style&index=0&id=5a39279a&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\ronan\\\\Documents\\\\Projects\\\\Appointment-Scheduler-Webapp\\\\client\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-5a39279a\"]])\n\nexport default __exports__"],"names":["isLoading","ref","errMsg","modal","emailExists","code","codeSent","codeVerified","codeIncorrect","newPassword","confirmPassword","passwordNotMatch","passwordChanged","noUserFound","checkOTP","userData","usernameHandler","props","username","emailHandler","email","userType","forgotPasswordPromptCountLimit","forgotPasswordPromptCount","computed","async","getPatient","axios","value","forgotPassword","then","response","data","err","getDoctor","getProvider","forgotPasswordOTP","confirmEmail","verifyCode","confirmCode","pushNewPassword","patientID","password","doctorID","managerID","__exports__","store","useStore","router","useRouter","authProgress","dynamicUser","validateMessage","incorrectUserPass","Boolean","newAccount","forgotPasswordCount","fetchingAuth","authPatient","_id","name","gmail","province","city","currentAddress","commit","push","authDoctor","verified","licenseNo","alias","fullname","specialist","hospitalOrigin","schedule","messageHistory","appointmentCategories","paymentMethods","providerLogin","registrationCode","hospital","login","onMounted","state","accountCreated","onBeforeMount","patientUsername","managerHospital"],"sourceRoot":""}